global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
  log stdout format raw local0 debug
#   lua-prepend-path /usr/share/haproxy/?/http.lua
  lua-load /usr/share/haproxy/http.lua
  lua-load /usr/share/haproxy/auth-request.lua

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s
  log global
  option httplog
  log-format frontend:%f/%H/%fi:%fp\ client:%ci:%cp\ GMT:%T\ body:%[capture.req.hdr(0)]\ request:%r
  option dontlognull

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s

frontend myfrontend
  mode http
  bind :80
  log global
  option http-buffer-request

  # auth-request syntax:
  #                             Backend name     Path to request
  # http-request lua.auth-request auth_request     /v1/data/authz

  # auth-intercept syntax:                                           (Headers to copy)
  #                               Backend name  Path         Method  Request  Success  Failure
  http-request capture req.body id 0
  http-request lua.auth-intercept auth_request  /v1/data/authz  POST    *        -        -
  http-request capture req.body id 0
# http-request redirect code 301 location %[var(txn.auth_response_location)] if ! { var(txn.auth_response_successful) -m bool }

  # http-request allow if { var(txn.auth_response_successful) -m bool }
  http-request deny if ! { var(txn.auth_response_successful) -m bool }
  http-request capture req.body id 0

  default_backend mybackend

backend auth_request
    mode http
    server auth_request opa:8181 check

backend mybackend
  server bundle_server bundle_server:8888 check
